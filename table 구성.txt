board table 구성
>> _ 스네이크 표기법 사용

유저 생성 구문
create user 'springUser'@'localhost' identified by 'password'

유저 권한 부여 구문
grant all privileges on springdb.* to 'springUser'@'localhost' with grant option;

값 반영
flush privileges;

create table board(
bno bigint not null auto_increment,
title varchar(200) not null,
content text not null,
writer varchar(100) not null,
reg_at datetime default now(),
mod_at datetime default now(),
read_count int default 0,
cmt_qty int default 0,
has_file int default 0,
primary key(bno)
);

--------------------------

VO => DB의 단일 테이블의 객체
DTO => 여러 테이블을 묶어서 사용
화면 <=> ctrl <=> service <=> dao <=> DB 저장

--------------------------
handler => DB처리 필요없이 화면과 컨트롤러의 처리가 복잡해질 경우
	- DB와 상관없음
	- 일반적으로 db의 정보가 필요하면
	컨트롤러 / 서비스에서 정보를 가져다가 매개변수로 전달

------------------------------
댓글 처리
depandency 추가
table 생성

create table comment(
cno bigint auto_increment,
bno bigint not null,
writer varchar(100) not null,
content text not null,
reg_at datetime default now(),
mod_at datetime default now(),
primary key(cno)
);

------------------------------
댓글 수정
댓글 수정버튼을 누르면 모달창 open

모달창에서 댓글 content 값을 입력하고,
수정버튼을 누르면 => async 수정 타기

---------------------------------
파일 업로드 설정
경로 - 지난번 경로 그대로 사용
D:\_myweb\_java\fileupload
- dependency 추가
- 경로 설정
webConfig 파일 업로드 설정
ServletConfig 화면에서 파일 경로 설정
MultipartResolver

multipart-config 설정
location : 파일 업로드 폴더 경로 등록
max-file-size : 업로드 되는 파일의 max 크기 20M
20971520
max-request-size : 한번에 올릴 수 있는 최대 크기 40M
41943040
file-size-threshold : 특정 사이즈의 메모리 사용 20M

------------------------------------
create table file(
uuid varchar(256) not null,
save_dir varchar(256) not null,
file_name varchar(256) not null,
file_type tinyint(1) default 0,
bno bigint,
file_size bigint,
reg_at datetime default now(),
primary key(uuid));

-----------------------------------
register.jsp
파일 추가 설정, js 파일 추가 버튼 설정

--------------------------------------

- 게시글 삭제시 해당 게시글의 댓글, 파일을 모두 삭제
- 댓글 수, 파일 수 구해서 list에 띄우기

-----------------------------------
파일 삭제 스케쥴러(예약기능)
일정 시점에서(예약시점) DB와 현재 업로드 파일 폴더를 비교하여
DB에는 없고, upload 경로에는 존재하는 파일을 찾아서 삭제하는 기능.

-------------------------------------
Member => security
security 패키지를 생성하여 security에 필요한 class를 모아서 처리

로그인(정보) => 회원 / hasRole()(권한) => 해당 페이지 허용

회원 여부 / 권한 => true => successHandler => 로그인 성공
		Principal 객체로 저장 / Credential 비밀번호 저장
	         => false => failureHandler => 로그인 실패

User 상속받아 UserDetail 메서드로 처리

admin (관리자) : 상품등록, 재고파악, 결제정보, 구매, 게시판
user (일반유저) : 구매, 게시판
no-user (비회원) : 게시판

----------------------------------------

create table member(
email varchar(100) not null,
pwd varchar(1000) not null,
nick_name varchar(100) not null,
reg_at datetime default now(),
last_login datetime default null,
primary key(email));

create table auth_member(
email varchar(100) not null,
auth varchar(50) not null,
primary key(email));

----------------------------------------
외래키 지정

alter table [테이블명] add foreign key([칼럼명])

옵션 on delete casecade(restrict) / on update cascade(restrict)

update는 이 값이 바뀔 때마다 나도 갱신, delete는 참조하는 키가 삭제되면 나도 삭제

alter table comment add constraint fk_comm foreign key(bno)
references board(bno) on delete cascade

alter table file add constraint fk_file foreign key(bno)
references board(bno) on delete cascade

alter table auth_member add constraint fk_auth foreign key(email)
references member(email) on delete cascade;





API
네이버 스마트 에디터 오픈소스
에디터 오픈소스 summernote
캘린더 api
네이버 챗봇 clover
네이버 지도
구글지도 api







